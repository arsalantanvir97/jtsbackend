let asyncHandler,Admin,Reset,generateToken,generateEmail,generateCode,createResetToken,verifyPassword,comparePassword,generateHash,User,HomeScreen;_448‍.x([["registerAdmin",()=>registerAdmin],["adminDetails",()=>adminDetails],["authAdmin",()=>authAdmin],["recoverPassword",()=>recoverPassword],["verifyRecoverCode",()=>verifyRecoverCode],["resetPassword",()=>resetPassword],["userAuth",()=>userAuth],["userDetails",()=>userDetails],["userRegister",()=>userRegister],["editProfile",()=>editProfile],["changepassword",()=>changepassword],["createHomeScreenData",()=>createHomeScreenData],["gethomeScreenData",()=>gethomeScreenData]]);_448‍.w("express-async-handler",[["default",["asyncHandler"],function(v){asyncHandler=v}]]);_448‍.w("../models/AdminModel",[["default",["Admin"],function(v){Admin=v}]]);_448‍.w("../models/ResetModel",[["default",["Reset"],function(v){Reset=v}]]);_448‍.w("../utills/generateJWTtoken.js",[["default",["generateToken"],function(v){generateToken=v}]]);_448‍.w("../services/generate_email.js",[["default",["generateEmail"],function(v){generateEmail=v}]]);_448‍.w("../services/generate_code.js",[["default",["generateCode"],function(v){generateCode=v}]]);_448‍.w("../queries",[["createResetToken",["createResetToken"],function(v){createResetToken=v}],["verifyPassword",["verifyPassword"],function(v){verifyPassword=v}],["comparePassword",["comparePassword"],function(v){comparePassword=v}],["generateHash",["generateHash"],function(v){generateHash=v}]]);_448‍.w("../models/UserModel",[["default",["User"],function(v){User=v}]]);_448‍.w("../models/HomeScreenMode",[["default",["HomeScreen"],function(v){HomeScreen=v}]]);
















const registerAdmin = asyncHandler(async (req, res) => {
  const { fullName, email, phone, password } = req.body
  let _image =
    req.files &&
    req.files._image &&
    req.files._image[0] &&
    req.files._image[0].path

  const AdminExists = await Admin.findOne({ email })

  if (AdminExists) {
    return res.status(400).json({ message: 'Admin already exists' })
  }

  const admin = await Admin.create({
    fullName,
    email,
    phone,
    _image,
    password,
  })

  if (admin) {
    res.status(201).json({
      success: true,
      message: 'Admin Successfully Created',
      _id: admin._id,
      fullName: admin.fullName,
      _image: admin._image,
      phone: admin.phone,
      email: admin.email,

      token: generateToken(admin._id),
    })
  } else {
    return res.status(400).json({ message: 'Invalid Admin Data' })
  }
})

const authAdmin = asyncHandler(async (req, res) => {
  console.log('authAdmin')
  const { email, password } = req.body

  const admin = await Admin.findOne({ email })

  if (admin && (await admin.matchPassword(password))) {
    res.json({
      success: true,
      message: 'Login succefully',

      _id: admin._id,

      phone: admin.phone,
      _image: admin._image,

      fullName: admin.fullName,
      email: admin.email,
      token: generateToken(admin._id),
    })
  } else {
    console.log('error')
    return res.status(400).json({
      message: 'Invalid User Data',
    })
  }
})
const userRegister = asyncHandler(async (req, res) => {
  const { fullName, email, password, confirm_password } = req.body

  if (!comparePassword(password, confirm_password))
    return res.status(400).json({ message: 'Password does not match' })

  const UserExists = await User.findOne({ email })

  if (UserExists) {
    return res.status(400).json({ message: 'User already exists' })
  }

  const user = await User.create({
    fullName,
    email,
    password,
  })

  if (user) {
    res.status(201).json({
      success: true,
      message: 'User Successfully Created',
      _id: user._id,
      fullName: user.fullName,
      email: user.email,

      token: generateToken(user._id),
    })
  } else {
    return res.status(400).json({ message: 'Invalid User Data' })
  }
})
const userAuth = asyncHandler(async (req, res) => {
  console.log('authAdmin')
  const { email, password } = req.body

  const user = await User.findOne({ email })

  if (user && (await user.matchPassword(password))) {
    res.json({
      success: true,
      message: 'Login succefully',

      _id: user._id,
      fullName: user.fullName,
      email: user.email,
      token: generateToken(user._id),
    })
  } else {
    console.log('error')
    return res.status(400).json({
      message: 'Invalid User Data',
    })
  }
})

const recoverPassword = asyncHandler(async (req, res) => {
  console.log('recoverPassword')
  const { email } = req.body

  const admin = await Admin.findOne({ email })
  if (!admin) {
    console.log('!admin')
    return res.status(400).json({
      message: 'Invalid Email',
    })
  } else {
    const status = generateCode()
    await createResetToken(email, status)

    const html = `<p>You are receiving this because you (or someone else) have requested the reset of the password for your account.
        \n\n Your verification status is ${status}:\n\n
        \n\n If you did not request this, please ignore this email and your password will remain unchanged.           
        </p>`
    await generateEmail(email, 'Blood Moon - Password Reset', html)
    return res.status(201).json({
      success: true,

      message: 'An OTP is send to your email please check your email address',
    })
  }
})
const verifyRecoverCode = asyncHandler(async (req, res) => {
  const { code, email } = req.body

  const reset = await Reset.findOne({ email, code })
  _448‍.g.console.log('reset', reset)

  if (reset) {
    return res
      .status(200)
      .json({ success: true, message: 'Token Validated successfully' })
  } else {
    return res.status(400).json({ message: 'Invalid Token status' })
  }
})

const resetPassword = asyncHandler(async (req, res) => {
  const { password, confirm_password, code, email } = req.body

  if (!comparePassword(password, confirm_password))
    return res.status(400).json({ message: 'Password Not Equal' })
  const reset = await Reset.findOne({ email, code })
  _448‍.g.console.log('reset', reset)
  if (!reset)
    return res.status(400).json({ message: 'Invalid Recovery status' })
  const updatedadmin = await Admin.findOne({ email })
  updatedadmin.password = await generateHash(password)
  await updatedadmin.save()
  res.status(201).json({
    success: true,
    message: 'Password Updated',
  })
})

const editProfile = async (req, res) => {
  try {
    const { fullName, phone } = req.body
    let _image =
      req.files &&
      req.files._image &&
      req.files._image[0] &&
      req.files._image[0].path

    const admin = await Admin.findOne({ _id: req.id })
    admin.fullName = fullName
    admin.phone = phone

    admin._image = _image ? _image : admin._image
    await admin.save()
    // await res.status(201).json({
    //   message: "Admin Update",
    //   admin,
    // });
    await res.status(201).json({
      success: true,
      message: 'Profile Updated succefully',
      _id: admin._id,
      fullName: admin.fullName,
      phone: admin.phone,
      email: admin.email,
      _image: admin._image,
      token: generateToken(admin._id),
    })
  } catch (error) {
    return res.status(400).json({ message: error.toString() })
  }
}

const changepassword = async (req, res) => {
  try {
    console.log('reset')

    const { existingpassword, newpassword, confirm_password } = req.body

    _448‍.g.console.log('req.body', req.body)
    const admin = await Admin.findOne({ _id: req.id })

    if (admin && (await admin.matchPassword(existingpassword))) {
      console.log('block1')
      if (!comparePassword(newpassword, confirm_password)) {
        console.log('block2')
        return res.status(400).json({ message: 'Password does not match' })
      } else {
        console.log('block3')
        admin.password = newpassword
        await admin.save()
        _448‍.g.console.log('admin', admin)
        res.status(201).json({
          success: true,
          message: 'Password Updated succefully',
          _id: admin._id,
          fullName: admin.fullName,
          phone: admin.phone,
          email: admin.email,
          _image: admin._image,
          token: generateToken(admin._id),
        })
      }
    } else {
      console.log('block4')

      return res.status(401).json({ message: 'Wrong Password' })
    }
  } catch (error) {
    _448‍.g.console.log('error', error)
    return res.status(400).json({ message: error.toString() })
  }
}
const userDetails = async (req, res) => {
  try {
    const user = await User.findById(req.id).lean().select('-password')
    await res.status(201).json({
      success: true,
      message: 'User Details',
      user,
    })
  } catch (err) {
    res.status(500).json({
      message: err.toString(),
    })
  }
}
const adminDetails = async (req, res) => {
  try {
    const admin = await Admin.findById(req.id).lean().select('-password')
    await res.status(201).json({
      success: true,
      message: 'User Details',
      admin,
    })
  } catch (err) {
    res.status(500).json({
      message: err.toString(),
    })
  }
}
const createHomeScreenData = asyncHandler(async (req, res) => {
  const { text } = req.body
  let _image =
    req.files &&
    req.files._image &&
    req.files._image[0] &&
    req.files._image[0].path

  const admin = await HomeScreen.create({
    text,
    banner: _image,
  })

  if (admin) {
    res.status(201).json({
      success: true,
    })
  } else {
    return res.status(400).json({ message: 'Error' })
  }
})
const gethomeScreenData = async (req, res) => {
  try {
    const homescreen = await HomeScreen.findOne()
    await res.status(201).json({
      success: true,
      message: 'Home Screen Data',
      homescreen,
    })
  } catch (err) {
    res.status(500).json({
      message: err.toString(),
    })
  }
}
















