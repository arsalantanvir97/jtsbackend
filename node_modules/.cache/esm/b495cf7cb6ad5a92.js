let mongoose,bcrypt;_b6a‍.x([["default",()=>_b6a‍.o]]);_b6a‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_b6a‍.w("bcryptjs",[["default",["bcrypt"],function(v){bcrypt=v}]]);


const UserSchema = mongoose.Schema(
  {
    fullName: {
      type: String,
    },
    email: {
      type: String,
      required: true,
      unique: true,
    },
    password: {
      type: String,
      required: true,
    },

    status: { type: Boolean, default: true },
  },
  {
    timestamps: true,
  }
)

UserSchema.methods.matchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password)
}

UserSchema.pre('save', async function (next) {
  if (!this.isModified('password')) {
    next()
  }

  const salt = await bcrypt.genSalt(12)
  this.password = await bcrypt.hash(this.password, salt)
})

const User = mongoose.model('User', UserSchema)

_b6a‍.d(User);
